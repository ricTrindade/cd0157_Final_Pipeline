version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - echo "Starting install phase..."
      - python --version
      - pip install --upgrade pip awscli
      - apt-get update && apt-get -y install jq

      # Download aws-iam-authenticator
      - curl -sS -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/aws-iam-authenticator

      # Download and install kubectl v1.31.0 (compatible with EKS 1.31)
      - curl -LO https://dl.k8s.io/release/v1.31.0/bin/linux/amd64/kubectl
      - curl -LO https://dl.k8s.io/release/v1.31.0/bin/linux/amd64/kubectl.sha256
      - echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check

      # Make binaries executable and update PATH
      - chmod +x ./kubectl ./aws-iam-authenticator
      - export PATH=$PWD/:$PATH
      - echo 'export PATH=$PWD/:$PATH' >> $HOME/.bashrc

      # Verify installations
      - kubectl version --short --client
      - aws-iam-authenticator help

  pre_build:
    commands:
      - echo "Starting pre_build phase..."
      - TAG="$REPOSITORY_NAME.$REPOSITORY_BRANCH.$ENVIRONMENT_NAME.$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
      - sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI:$TAG"'@' deployment.yml
      - $(aws ecr get-login --no-include-email)
      - export KUBECONFIG=$HOME/.kube/config
      - ls -l

  build:
    commands:
      - echo "Starting build phase..."
      - docker build --tag $REPOSITORY_URI:$TAG .

  post_build:
    commands:
      - echo "Starting post_build phase..."
      - docker push $REPOSITORY_URI:$TAG
      - echo "EKS_CLUSTER_NAME: $EKS_CLUSTER_NAME"
      - echo "EKS_KUBECTL_ROLE_ARN: $EKS_KUBECTL_ROLE_ARN"
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --role-arn $EKS_KUBECTL_ROLE_ARN
      - kubectl apply -f deployment.yml
      - printf '[{"name":"eksctl-demo","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json

artifacts:
  files: build.json
